--------------------------- MODULE TimeSync -----------------------------
EXTENDS Integers, TLC

(*--algorithm lamp
variable NETstate = "UNINITED", AMstate = "UNINITED", BMstate = "UNINITED", SENstate = "UNINITED",
  NETtick = 0, AMtick = 0, BMtick = 0, SENtick = 0, StateSet = {"START", "STOP", "UNINITED"};

macro NETtransition(from, to) begin
  either 
      await to = "START";
      NETstate := to
  or
      await to = "STOP";
      NETstate := to
  or
      await to = "EXIT";
      NETstate := to
  or
      await to = "UNINITED";
      NETstate := to
  end either;
end macro;

macro AMtransition(from, to) begin
  either 
      await to = "START";
      if NETstate = "START" then
          AMtick := NETtick;
          AMstate := to;
      end if;
  or
      await to = "STOP";
      AMstate := to
  or
      await to = "EXIT";
      AMstate := to
  or
      await to = "UNINITED";
      AMstate := to
  end either;
end macro;

macro BMtransition(from ,to) begin
  either 
      await to = "START";
      if AMstate = "START" then
          BMtick := AMtick;
          BMstate := to;
      end if;
  or
      await to = "STOP";
      BMstate := to;
  or
      await to = "EXIT";
      BMstate := to;
  or
      await to = "UNINITED";
      BMstate := to;
  end either;
end macro;

macro SENtransition(from , to) begin
  either 
      await to = "START";
      if AMstate = "START" then
          SENtick := AMtick;
          SENstate := to;
      end if;
  or
      await to = "STOP";
      BMstate := to;
  or
      await to = "EXIT";
      BMstate := to;
  or
      await to = "UNINITED";
      BMstate := to;
  end either;
end macro;

process NETStateMachine = "NET"
begin
  Action:
    either 
        await NETstate = "START";
        NETtick := NETtick + 1;
    or
        await NETstate = "STOP";
    or
        await NETstate = "EXIT";
    or
        await NETstate = "UNINITED";
    end either;
    if NETstate /= "EXIT" then
        goto Action;
    else
        goto EXIT;
    end if;
  EXIT: skip
end process;

process AMStateMachine = "AM"
begin
  Action:
    either 
        await AMstate = "START";
        AMtick := AMtick + 2;
      or
        await AMstate = "STOP";
    or
        await AMstate = "EXIT";
    or
        await AMstate = "UNINITED";
    end either;
    if AMstate /= "EXIT" then
        goto Action;
    else
        goto EXIT;
    end if;
  EXIT:
    skip
end process;

process BMStateMachine = "BM"
begin
  Action:
    either 
        await BMstate = "START";
        if AMstate = "START" then
          if BMtick - AMtick < 25  /\  BMtick - AMtick > -25 then
            BMtick := AMtick; 
          end if;
        else
          BMtick := BMtick + 3;
        end if;
    or
        await BMstate = "STOP";
    or
        await BMstate = "EXIT";
    or
        await BMstate = "UNINITED";
    end either;
    if BMstate /= "EXIT" then
        goto Action;
    else
        goto EXIT;
    end if;
  EXIT:
    skip
end process;

process SENStateMachine = "SEN"
begin
  Action:
    either 
        await SENstate = "START";
        if AMstate = "START" then
          if SENtick - AMtick < 25  /\  SENtick - AMtick > -25 then
            SENtick := AMtick; 
          end if;
        elsif BMstate = "START" then
          if SENtick - BMtick < 25  /\  SENtick - BMtick > -25 then
            SENtick := BMtick; 
          end if;
        else
          SENtick := SENtick + 4;
        end if;
    or
        await SENstate = "STOP";
    or
        await SENstate = "EXIT";
    or
        await SENstate = "UNINITED";
    end either;
    if SENstate /= "EXIT" then
        goto Action;
    else
        goto EXIT;
    end if;
  EXIT:
    skip
end process;

process CheckRules = "CheckRules"
begin
  START:
    NETtransition("UNINITED", "START");
  EXIT:
    NETtransition("START", "EXIT");
  EXIT2:
    AMtransition("START", "EXIT");
  EXIT3:
    BMtransition("START", "EXIT");
  EXIT4:
    SENtransition("START", "EXIT");
end process;


end algorithm; *)


\* BEGIN TRANSLATION (chksum(pcal) = "b6249d7b" /\ chksum(tla) = "365abe17")

\* END TRANSLATION 


==================================================================

